#!/bin/bash -
# Expand and print IPv4 address in CIDR notation to standard output
# Version 2.0
# Written by Bernard Lim <lim.yiok.kia@gmail.com>

AUTHOR="Bernard Lim <lim.yiok.kia@gmail.com>"
VERSION="3.0"
PROG=$(basename $0)

# default action: print range
ACTION=print_cidr

# fanciful output
b="\033[1m"  # bold
u="\033[4m"  # underline
o="\033[0m"  # off

# graceful death!
die() {
  echo "$PROG: $*" >&2
  exit 1
}

# shorter usage
short() {
  usage | sed 2q
  echo "See \`$PROG -h' for more information"
}

# usage
usage() {
cat<<EOF
Usage: $PROG [OPTION] [ADDRESS]...
Expand and print ADDRESS in CIDR notation to standard output

$(echo -e ${b}Options${o})
  -c TYPE       Quick conversion for TYPE
  -e            Expand and print ADDRESS line by line
  -h            Display this help and exit
  -v            Print version information and exit

Conversion TYPE can be:
  1   address to number
  2   number to address
  3   address to hexadecimal
  4   hexadecimal to address
  5   netmask bits to address
  6   netmask address to bits

Without any options, $PROG will only print the range of
ADDRESS, i.e. starting and ending IP address as follows:

  a.b.c.d - w.x.y.z    where a, b, c, d, w, x, y and z
                       are integers from 0 to 255

Note that using option \`-e' may take a longer time depending on
the netmask because $PROG is printing every single IP address in
the range.

When ADDRESS is -, read standard input.

$(echo -e ${b}Examples${o})
  $PROG 10.10.10.10/10      # Expand and print range
  $PROG -e 10.10.10.10/10   # Expand and print all IP address in range
  $PROG -c1 10.10.10.10     # Convert IP address to number
  $PROG -c2 168430090       # Convert number to IP address
  $PROG -c3 10.10.10.10     # Convert IP address to hexadecimal
  $PROG -c4 21              # Convert netmask bits to netmask address

Report $PROG bugs to $AUTHOR
This software is distributed in the hope that it will be
useful but without any warranty. It is provided "as is".
EOF
}

# CIDR validation
validate_cidr() {
  # sanity check
  if [ -z "$1" ]; then
    short; exit 1
  fi

  # syntax check
  local syntax="^([0-9]{1,3}\.){3}([0-9]{1,3})\/[0-9]{1,2}$"
  if grep -Ev "$syntax" >/dev/null <<<"$1"; then
    die "invalid IP address or CIDR notation"
  fi

  # is the IP address valid?
  OLD_IFS="$IFS"
  IFS=./ read -r a b c d e <<<"$1"; IFS="$OLD_IFS"
  if (( $a > 255 || $b > 255 || $c > 255 || $d > 255 )); then
    die "invalid IPv4 address"
  fi

  # is the netmask valid?
  if (( $((10#$e)) > 32 )); then
    die "invalid netmask"
  fi
}

# IP address validation
validate_ip() {
  # sanity check
  if [ -z "$1" ]; then
    short; exit 1
  fi

  # syntax check
  local syntax="^([0-9]{1,3}\.){3}([0-9]{1,3})$"
  if grep -Ev "$syntax" >/dev/null <<<"$1"; then
    die "invalid IP address"
  fi

  # is the IP address valid?
  OLD_IFS="$IFS"
  IFS=. read -r a b c d <<<"$1"; IFS="$OLD_IFS"
  if (( $a > 255 || $b > 255 || $c > 255 || $d > 255 )); then
    die "invalid IPv4 address"
  fi
}

# netmask validation
validate_nm() {
  # sanity check
  if [ -z "$1" ]; then
    short; exit 1
  fi

  # syntax check
  local syntax="^[0-9]{1,2}$"
  if grep -Ev "$syntax" >/dev/null <<<"$1"; then
    die "invalid netmask"
  fi

  # is the netmask valid?
  if (( $((10#$1)) > 32 )); then
    dike "invalid netmask"
  fi
}

# number validation
validate_num() {
  # sanity check
  if [ -z "$1" ]; then
    short; exit 1
  fi

  # syntax check
  local syntax="^[0-9]+$"
  if grep -Ev "$syntax" >/dev/null <<<"$1"; then
    die "invalid IPv4 address"
  fi

  # is the IP address valid?
  if (( "$1" > 0xffffffff )); then
    die "invalid IPv4 address"
  fi
}

# convert netmask bits to number
bit2num() {
  input=$1
  validate_nm $input

  let bits=$input
  let nmask=0
  for ((b=0; b<bits; b++)); do
    nmask=$((nmask | 1 << (31 - b)))
  done
  echo $nmask
}

# convert netmask bits to address
bit2addr() {
  input=$1
  validate_nm $input

  let bit=$input
  echo $(num2quad $(bit2num $bit))
}

# convert number to quad-dotted notation
num2quad() {
  input=$1
  validate_num $input

  let num=$input
  for ((o=0; o<4; o++)); do
    a[$o]=$((num >> (8 * (3 - o)) & 0xff))
  done
  printf "%d.%d.%d.%d\n" ${a[0]} ${a[1]} ${a[2]} ${a[3]}
}

# convert quad-dotted notation to hexadecimal
quad2hex() {
  input=$1
  validate_ip $input

  printf "0x%X\n" $(quad2num $input)
}

# convert quad-dotted notation to number
quad2num() {
  input=$1
  validate_ip $input

  OLD_IFS="$IFS"
  IFS=. read -a octet <<<"$input"; IFS="$OLD_IFS"
  let num=0
  for ((o=0; o<4; o++)); do
    num=$((num | octet[o] << (8 * (3 - o))))
  done
  echo $num
}

# expand CIDR
expand_cidr() {
  input=$1
  validate_cidr $input

  # tokenize input
  OLD_IFS="$IFS"
  IFS=./ read -r o1 o2 o3 o4 nm <<<"$input"; IFS="$OLD_IFS"

  let  wc=$((32 - nm)) # cisco wildcard bits
  let   o=$((wc / 8))  # no. of octets
  let msb=$((wc % 8))  # most significant bits

  n=$((2**msb-1))
  quad="%d.%d.%d.%d"

  case $o in
    0)
      o4=$((o4 & $((255-n))))
      for ((i=0; i<=$n; i++)); do
        printf "$quad\n" $o1 $o2 $o3 $((o4+i))
      done
      ;;
    1)
      o3=$((o3 & $((255-n))))
      o4=0
      for ((i=0; i<=$n; i++)); do
        for ((j=0; j<=255; j++)); do
          printf "$quad\n" $o1 $o2 $((o3+i)) $((o4+j))
        done
      done
      ;;
    2)
      o2=$((o2 & $((255-n))))
      o3=0; o4=0
      for ((i=0; i<=$n; i++)); do
        for ((j=0; j<=255; j++)); do
          for ((k=0; k<=255; k++)); do
            printf "$quad\n" $o1 $((o2+i)) $((o3+j)) $((o4+k))
          done
        done
      done
      ;;
    3)
      o1=$((o1 & $((255-n))))
      o2=0; o3=0; o4=0
      for ((i=0; i<=$n; i++)); do
        for ((j=0; j<=255; j++)); do
          for ((k=0; k<=255; k++)); do
            for ((l=0; l<=255; l++)); do
              printf "$quad\n" $((o1+i)) $((o2+j)) $((o3+k)) $((o4+l))
            done
          done
        done
      done
      ;;
    4)
      o1=0; o2=0; o3=0; o4=0
      for ((i=0; i<=255; i++)); do
        for ((j=0; j<=255; j++)); do
          for ((k=0; k<=255; k++)); do
            for ((l=0; l<=255; l++)); do
              printf "$quad\n" $((o1+i)) $((o2+j)) $((o3+k)) $((o4+l))
            done
          done
        done
      done
      ;;
  esac
}

# print CIDR range
print_cidr() {
  awk -F"/" '
    function bit2num(bits)
    {
      num = 0;
      for (b = 0; b < bits; b++)
        num = or(num, lshift(1, (31 - b)));
      return num
    }
    function num2quad(num)
    {
      for (o = 0; o < 4; o++)
        a[o] = and(rshift(num, 8 * (3 - o)), 0xff)
      printf "%d.%d.%d.%d", a[0], a[1], a[2], a[3]
    }
    function quad2num(quad)
    {
      split(quad, octets, ".")
      num = 0;
      for (o = 0; o < 4; o++)
        num = or(num, lshift(octets[o+1], 8 * (3 - o)));
      return num
    }
    {
      ip = $1; nm = $2
      lo = and(quad2num(ip), bit2num(nm))
      hi = 0xffffffff - bit2num(nm) + lo
      printf "%s -- %s\n", num2quad(lo), num2quad(hi)
    }' $1
}

# print CIDR range
print_cidr_old() {
  input=$1
  validate_cidr $input

  # tokenize input
  OLD_IFS="$IFS"
  IFS=/ read -r ip nm <<<"$input"; IFS="$OLD_IFS"

  lo=$(($(quad2num $ip) & $(bit2num $nm)))
  hi=$((0xffffffff - $(bit2num $nm) + $lo))

  printf "%s - %s" $(num2quad $lo) $(num2quad $hi)
}

# parse short options
OPTIND=1
while getopts ":c:ehv" opt; do
  shift $((OPTIND-1))
  case $opt in
    c)
      case $OPTARG in
        1) ACTION=quad2num;;
        2) ACTION=num2quad;;
        3) ACTION=quad2hex;;
        4) ACTION=hex2quad;;
        5) ACTION=bit2addr;;
        6) ACTION=addr2bit;;
        *) die "invalid option argument: $OPTARG";;
      esac
      ;;
    e)
      ACTION=expand_cidr
      ;;
    h)
      if [ $# -eq 0 ]; then
        usage; exit 0
      else
        short; exit 1
      fi
      ;;
    v)
      if [ $# -eq 0 ]; then
        echo "$PROG $VERSION"
        echo "Written by $AUTHOR"
        exit 0
      else
        short; exit 1
      fi
      ;;
   \?) die "invalid option: -$OPTARG";;
  esac
done

# main
# empty arguments
if [ $# -eq 0 ]; then short; exit 1; fi

if [[ "$1" == "-" ]]; then
  $ACTION -
  # read from stdin
  #shift 1
  # crazy fast; cat | sipcalc - | grep -i 'network range' | cut -c18-
  #while read -r input; do
  #  read -a arr <<<"$input"
  #  for i in "${arr[@]}"; do
  #    $ACTION $i
  #  done
  #done
else
  # everything else
  for input in $@; do
    $ACTION $input
  done
fi
