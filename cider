#!/bin/bash -
# Expand and print IPv4 address in CIDR notation to standard output
# Version 2.0
# Written by Bernard Lim <lim.yiok.kia@gmail.com>

AUTHOR="Bernard Lim <lim.yiok.kia@gmail.com>"
VERSION="2.0"
PROG=$(basename $0)

# default action: print range
ACTION=print_cidr

# fanciful output
b="\033[1m"  # bold
u="\033[4m"  # underline
o="\033[0m"  # off

# usage
usage() {
cat<<EOF
Usage: $PROG [OPTION] [ADDRESS]
Expand and print ADDRESS in CIDR notation to standard output

$(echo -e ${b}Options${o})
  -c TYPE         Quick conversion for TYPE
  -e              Expand and print ADDRESS line by line
  -h              Display this help and exit
  -v              Print version information and exit

Conversion TYPE can be:
  1    IP address to number
  2    number to IP address
  3    IP address to hexadecimal
  4    netmask bits to netmask address

Without any options, $PROG will only print the range of
ADDRESS, i.e. starting and ending IP address as follows:

  a.b.c.d - w.x.y.z    where a, b, c, d, w, x, y and z
                       are integers from 0 to 255

Note that using option \`-e' may take a longer time depending on
the netmask because $PROG is printing every single IP address in
the range.

With no ADDRESS, or when ADDRESS is -, read standard input.

$(echo -e ${b}Examples${o})
  $PROG 10.10.10.10/10      # Expand and print range
  $PROG -e 10.10.10.10/10   # Expand and print all IP address in range
  $PROG -c1 10.10.10.10     # Convert IP address to number
  $PROG -c2 168430090       # Convert number to IP address
  $PROG -c3 10.10.10.10     # Convert IP address to hexadecimal
  $PROG -c4 21              # Convert netmask bits to netmask address

Report $PROG bugs to $AUTHOR
This software is distributed in the hope that it will be
useful but without any warranty. It is provided "as is".
EOF
}

# CIDR validation
validate_cidr() {
  # sanity check
  if [ -z "$1" ]; then
    echo "$PROG: argument is missing: [ADDRESS]"
    return 1
  fi

  # syntax check
  local syntax="^([0-9]{1,3}\.){3}([0-9]{1,3})\/[0-9]{1,2}$"
  if grep -Ev "$syntax" >/dev/null <<<"$1"; then
    echo "$PROG: invalid IP address or CIDR notation"
    return 1
  fi

  # is the IP address valid?
  IFS=./ read a b c d e <<<"$1"
  if (( $a > 255 || $b > 255 || $c > 255 || $d > 255 )); then
    echo "$PROG: invalid IPv4 address"
    return 1
  fi

  # is the netmask valid?
  if (( $((10#$e)) > 32 )); then
    echo "$PROG: invalid netmask"
    return 1
  fi
}

# IP address validation
validate_ip() {
  # sanity check
  if [ -z "$1" ]; then
    echo "$PROG: argument is missing: [ADDRESS]"
    return 1
  fi

  # syntax check
  local syntax="^([0-9]{1,3}\.){3}([0-9]{1,3})$"
  if grep -Ev "$syntax" >/dev/null <<<"$1"; then
    echo "$PROG: invalid IP address"
    return 1
  fi

  # is the IP address valid?
  IFS=. read a b c d <<<"$1"
  if (( $a > 255 || $b > 255 || $c > 255 || $d > 255 )); then
    echo "$PROG: invalid IPv4 address"
    return 1
  fi
}

# netmask validation
validate_nm() {
  # sanity check
  if [ -z "$1" ]; then
    echo "$PROG: argument is missing: [NETMASK]"
    return 1
  fi

  # syntax check
  local syntax="^[0-9]{1,2}$"
  if grep -Ev "$syntax" >/dev/null <<<"$1"; then
    echo "$PROG: invalid netmask"
    return 1
  fi

  # is the netmask valid?
  if (( $((10#$1)) > 32 )); then
    echo "$PROG: invalid netmask"
    return 1
  fi
}

# number validation
validate_num() {
  # sanity check
  if [ -z "$1" ]; then
    echo "$PROG: argument is missing: [ADDRESS]"
    return 1
  fi

  # syntax check
  local syntax="^[0-9]+$"
  if grep -Ev "$syntax" >/dev/null <<<"$1"; then
    echo "$PROG: invalid IPv4 address"
    return 1
  fi

  # is the IP address valid?
  if (( "$1" > 0xffffffff )); then
    echo "$PROG: invalid IPv4 address"
    return 1
  fi
}

# convert netmask bits to number
bit2num() {
  input=$1
  validate_nm $input; if [ $? -eq 1 ]; then return 1; fi

  let bits=$input
  let nmask=0
  for ((b=0; b<bits; b++)); do
    nmask=$((nmask | 1 << (31 - b)))
  done
  echo $nmask
}

# convert netmask bits to address
bits2addr() {
  input=$1
  validate_nm $input; if [ $? -eq 1 ]; then return 1; fi

  let bits=$input
  echo $(num2quad $(bit2num $bits))
}

# convert number to quad-dotted notation
num2quad() {
  input=$1
  validate_num $input; if [ $? -eq 1 ]; then return 1; fi

  let num=$input
  for ((o=0; o<4; o++)); do
    a[$o]=$((num >> (8 * (3 - o)) & 0xff))
  done
  printf "%d.%d.%d.%d\n" ${a[0]} ${a[1]} ${a[2]} ${a[3]}
}

# convert quad-dotted notation to hexadecimal
quad2hex() {
  input=$1
  validate_ip $input; if [ $? -eq 1 ]; then return 1; fi

  printf "%X\n" $(quad2num $input)
}

# convert quad-dotted notation to number
quad2num() {
  input=$1
  validate_ip $input; if [ $? -eq 1 ]; then return 1; fi

  IFS=. read -a octet <<<"$input"
  let num=0
  for ((o=0; o<4; o++)); do
    num=$((num | octet[o] << (8 * (3 - o))))
  done
  echo $num
}

# expand CIDR
expand_cidr() {
  input=$1
  validate_cidr $input; if [ $? -eq 1 ]; then return 1; fi

  # tokenize input
  IFS=./ read o1 o2 o3 o4 nm <<<"$input"

  let wc=$((32 - nm))  # cisco wildcard bits
  let o=$((wc / 8))    # no. of octets
  let msb=$((wc % 8))  # most significant bits

  rr=$((2**msb-1))
  quad="%d.%d.%d.%d"

  case $o in
    0)
      o4=$((o4 & $((255-rr))))
      for ((i=0; i<=$rr; i++)); do
        printf "$quad\n" $o1 $o2 $o3 $((o4+i))
      done
      ;;
    1)
      o3=$((o3 & $((255-rr))))
      o4=0
      for ((i=0; i<=$rr; i++)); do
        for ((j=0; j<=255; j++)); do
          printf "$quad\n" $o1 $o2 $((o3+i)) $((o4+j))
        done
      done
      ;;
    2)
      o2=$((o2 & $((255-rr))))
      o3=0; o4=0
      for ((i=0; i<=$rr; i++)); do
        for ((j=0; j<=255; j++)); do
          for ((k=0; k<=255; k++)); do
            printf "$quad\n" $o1 $((o2+i)) $((o3+j)) $((o4+k))
          done
        done
      done
      ;;
    3)
      o1=$((o1 & $((255-rr))))
      o2=0; o3=0; o4=0
      for ((i=0; i<=$rr; i++)); do
        for ((j=0; j<=255; j++)); do
          for ((k=0; k<=255; k++)); do
            for ((l=0; l<=255; l++)); do
              printf "$quad\n" $((o1+i)) $((o2+j)) $((o3+k)) $((o4+l))
            done
          done
        done
      done
      ;;
    4)
      o1=0; o2=0; o3=0; o4=0
      for ((i=0; i<=255; i++)); do
        for ((j=0; j<=255; j++)); do
          for ((k=0; k<=255; k++)); do
            for ((l=0; l<=255; l++)); do
              printf "$quad\n" $((o1+i)) $((o2+j)) $((o3+k)) $((o4+l))
            done
          done
        done
      done
      ;;
  esac
}

# print CIDR range
print_cidr() {
  input=$1
  validate_cidr $input; if [ $? -eq 1 ]; then return 1; fi

  # tokenize input
  IFS=./ read o1 o2 o3 o4 nm <<<"$input"

  start=$(($(quad2num "$o1.$o2.$o3.$o4") & $(bit2num $nm)))
  bcast=$((0xffffffff - $(bit2num $nm) + $start))

  printf "%s - %s\n" $(num2quad $start) $(num2quad $bcast)
}

# parse short options
OPTIND=1
while getopts ":c:ehv" opt; do
  shift $((OPTIND-1))
  case $opt in
    c)
      if [ $# -gt 1 ]; then
        echo "$PROG: only one -$opt should be specified" >&2
        exit 1
      fi

      case $OPTARG in
        1) ACTION=quad2num;;
        2) ACTION=num2quad;;
        3) ACTION=quad2hex;;
        4) ACTION=bits2addr;;
        *) echo "$PROG: invalid option argument: $OPTARG" >&2; exit 1;;
      esac
      ;;
    e)
      if [ $# -gt 1 ]; then
        echo "$PROG: only one -$opt should be specified" >&2
        exit 1
      fi

      ACTION=expand_cidr
      ;;
    h)
      if [ $# -eq 0 ]; then
        usage
        exit 0
      else
        exit 1
      fi
      ;;
    v)
      if [ $# -eq 0 ]; then
        echo "$PROG $VERSION"
        echo "Written by $AUTHOR"
        exit 0
      else
        exit 1
      fi
      ;;
   \?) echo "$PROG: invalid option: -$OPTARG"; exit 1;;
  esac
done

# main
# read from stdin
if [[ -z "$1" || "$1" == "-" ]]; then
  while read input; do
    $ACTION $input
  done
# read from argument
else
    input=$1
    $ACTION $input
fi
