#!/bin/bash -
# Expand and print IPv4 address in CIDR notation to standard output
# Version 3.0
# Written by Bernard Lim <lim.yiok.kia@gmail.com>

AUTHOR="Bernard Lim <lim.yiok.kia@gmail.com>"
VERSION="3.0"
PROG=$(basename $0)

# default action: print range
ACTION=print_cidr

# fanciful output
b="\033[1m"  # bold
u="\033[4m"  # underline
o="\033[0m"  # off

# graceful death!
die() {
  echo "$PROG: $*" >&2
  exit 1
}

# shorter usage
short() {
  usage | sed 2q
  echo "See \`$PROG -h' for more information"
}

# usage
usage() {
cat<<EOF
Usage: $PROG [OPTION] [ADDRESS]...
Expand and print ADDRESS in CIDR notation to standard output

$(echo -e ${b}Options${o})
  -c TYPE       Quick conversion for TYPE
  -e            Expand and print ADDRESS line by line
  -h            Display this help and exit
  -v            Print version information and exit

Conversion TYPE can be:
  1    >>>>>    address to number
  2    >>>>>    number to address
  3    >>>>>    address to hexadecimal
  4    >>>>>    hexadecimal to address
  5    >>>>>    netmask bits to address
  6    >>>>>    netmask address to bits

Without any options, $PROG will only print the range of
ADDRESS, i.e. starting and ending IP address as follows:

  a.b.c.d - w.x.y.z    where a, b, c, d, w, x, y and z
                       are integers from 0 to 255

Note that using option \`-e' for subnet bigger then /16
may take a longer time depending on the netmask because
$PROG is printing every single IP address in the range.

When ADDRESS is -, read standard input. This can be useful
if you $(echo -ne ${b}cat${o})(1) a list of addresses to $PROG for fast expansion.

$(echo -e ${b}Examples${o})
  $PROG 10.10.10.10/10      # Expand and print range
  $PROG -e 10.10.10.10/10   # Expand and print all IP address in range
  $PROG -c1 10.10.10.10     # Convert IP address to number
  $PROG -c2 168430090       # Convert number to IP address
  $PROG -c3 10.10.10.10     # Convert IP address to hexadecimal
  $PROG -c4 0A0A0A0A        # Convert hexadecimal to IP address
  $PROG -c5 25              # Convert netmask bits to address
  $PROG -c6 255.255.240.0   # Convert netmask address to bits

Report $PROG bugs to $AUTHOR
This software is distributed in the hope that it will be
useful but without any warranty. It is provided "as is".
EOF
}

# functions implemented in awk
_awk() {
  awk -F"[./]" -v "prog=$PROG" -v "f=$1" '
    function bit2num(bit)
    {
      validate_nm(bit)
      num = 0;
      for (b = 0; b < bit; b++)
        num = or(num, lshift(1, (31 - b)));
      return num
    }
    function num2bit(num)
    {
      validate_num(num)
      bit = 0
      for (b = 0; b < 32; b++)
        if (and(rshift(num, (31 - b)), 1) != 1)
          break
        else
          bit++
      return bit
    }
    function bit2addr(bit)
    {
      validate_nm(bit)
      return num2quad(bit2num(bit))
    }
    function addr2bit(quad)
    {
      validate_ip(quad)
      return num2bit(quad2num(quad))
    }
    function num2quad(num)
    {
      validate_num(num)
      for (o = 0; o < 4; o++)
        a[o] = and(rshift(num, 8 * (3 - o)), 0xff)
      return a[0]"."a[1]"."a[2]"."a[3]
    }
    function quad2num(quad)
    {
      validate_ip(quad)
      split(quad, octets, ".")
      num = 0;
      for (o = 0; o < 4; o++)
        num = or(num, lshift(octets[o+1], 8 * (3 - o)));
      return num
    }
    function quad2hex(quad)
    {
      validate_ip(quad)
      printf "%X", quad2num(quad)
    }
    function hex2quad(hex)
    {
      validate_hex(hex)
      return num2quad(strtonum("0x"hex))
    }
    function expand_cidr()
    {
      validate_cidr($0)
      ip = $1"."$2"."$3"."$4; validate_ip(ip)
      nm=$5; validate_nm(nm)
      lo = and(quad2num(ip), bit2num(nm))
      hi = 0xffffffff - bit2num(nm) + lo
      for (i=lo; i<=hi; i++) printf "%s\n", num2quad(i)
    }
    function print_cidr()
    {
      validate_cidr($0)
      ip = $1"."$2"."$3"."$4; validate_ip(ip)
      nm=$5; validate_nm(nm)
      lo = and(quad2num(ip), bit2num(nm))
      hi = 0xffffffff - bit2num(nm) + lo
      printf "%s - %s\n", num2quad(lo), num2quad(hi)
    }
    function die(err)
    {
      print prog ": " err > "/dev/stderr"
      next
    }
    function validate_cidr(a)
    {
      if (a !~ /^([0-9]{1,3}\.){3}[0-9]{1,3}\/[0-9]{1,2}$/)
        die("invalid IPv4 address or netmask")
    }
    function validate_ip(ip)
    {
      if (ip !~ /^([0-9]{1,3}\.){3}[0-9]{1,3}$/) die("invalid IPv4 address")
      split(ip, quad, ".")
      if (quad[1] < 0 || quad[1] > 255) die("invalid IPv4 address")
      if (quad[2] < 0 || quad[2] > 255) die("invalid IPv4 address")
      if (quad[3] < 0 || quad[3] > 255) die("invalid IPv4 address")
      if (quad[4] < 0 || quad[4] > 255) die("invalid IPv4 address")
    }
    function validate_nm(nm)
    {
      if (nm !~ /^[0-9]{1,2}$/) die("invalid netmask")
      n = strtonum(nm)
      if (n < 0 || n > 32) die("invalid netmask")
    }
    function validate_num(num)
    {
      if (num !~ /^[0-9]+$/) die("invalid IPv4 address")
      n = strtonum(num)
      if (n < 0 || n > 0xffffffff) die("invalid IPv4 address")
    }
    function validate_hex(hex)
    {
      if (length(hex) > 8 || hex !~ /[a-fA-F0-9]+/) die("invalid IPv4 address")
    }
    /* function chooser */
    {
      switch (f) {
        case "quad2num": print quad2num($0); break
        case "num2quad": print num2quad($0); break
        case "quad2hex": print quad2hex($0); break
        case "hex2quad": print hex2quad($0); break
        case "bit2addr": print bit2addr($0); break
        case "addr2bit": print addr2bit($0); break
        case "expand_cidr": expand_cidr(); break
        case "print_cidr": print_cidr(); break
        default: die("unknown function"); break
      }
    }' $2
}

# parse short options
OPTIND=1
while getopts ":c:ehv" opt; do
  shift $((OPTIND-1))
  case $opt in
    c)
      if [ $# -ge 1 ]; then
        case $OPTARG in
          1) ACTION=quad2num;;
          2) ACTION=num2quad;;
          3) ACTION=quad2hex;;
          4) ACTION=hex2quad;;
          5) ACTION=bit2addr;;
          6) ACTION=addr2bit;;
          *) die "invalid option argument: $OPTARG";;
        esac
      else
        short
        exit 1
      fi
      ;;
    e)
      if [ $# -eq 1 ]; then
        ACTION=expand_cidr
      else
        short
        exit 1
      fi
      ;;
    h)
      if [ $# -eq 0 ]; then
        usage; exit 0
      else
        short; exit 1
      fi
      ;;
    v)
      if [ $# -eq 0 ]; then
        echo "$PROG $VERSION"
        echo "Written by $AUTHOR"
        exit 0
      else
        short; exit 1
      fi
      ;;
   \?) die "invalid option: -$OPTARG";;
  esac
done

# main
if [ $# -eq 0 ]; then
  # empty arguments
  short
  exit 1
elif [[ "$1" == "-" ]]; then
  # read from stdin
  _awk $ACTION -
else
  for i in $*; do _awk $ACTION <<<"$i"; done
fi
